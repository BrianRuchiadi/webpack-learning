You can manage webpack configuration in the following ways:
- Maintain configuration within multiple files for each environment and point webpack to each
  through the --config parameter, sharing configuration through module imports
- Push configuration to a library, which you then consume
- Push configuration to a tool
- Maintain all configuration within a single file and branch there and rely on the --env
  parameter. The approach is explained in detail later in this chapter

These approches can be combined to create a higher level configuration that is then composed
of smaller parts. Those parts could then be added to a library which you then use through 
npm making it possible to consume the same configuration across multiple projects.


COMPOSING CONFIGURATION BY MERGING

If configuration file is broken into separate pieces, they have to be combined again somehow.
Normally this means merging objects and arrays. To eliminate the problem of dealing with 
Object.assign and Array.concat, webpack-merge was developed.

webpack-merge does two things: it concatenates arrays and merges objects instead of overriding
them, allowing composition. The example below shows the behavior in detail:

    merge = require('webpack-merge')

    merge(
        { a: [1], b: 5, c: 20 },
        { a: [2], b: 10, d: 421 }
    )

    { a: [1,2], b: 10, c: 20, d: 421 }

webpack-merge provides even more control through strategies that enable you to control its
behaviour per field. They allow you to force it to append, prepend, or replace content.

